module Main where

import Lib
import Data.List
import Data.Ord

-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
problemOne :: Int -> Int
problemOne maxSize = sum [x | x <- [1..maxSize], x `mod` 3 == 0 || x `mod` 5 == 0 ]




-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
problemTwo :: Integer -> Integer
problemTwo maxSize = sum (filter even (takeWhile (< maxSize) (getUnlimitedFibs 1 2)))


-- The prime factors of 13195 are 5, 7, 13 and 29.

-- What is the largest prime factor of the number 600851475143 ?

problemThree :: Integer -> Integer
problemThree x = maximum (filter (isFactor x) (filter isPrime [1, 3..sqX]))
    where sqX = lowerSq x

-- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.

-- problemFour :: [Integer]
problemFour = maximum palindromes
    where
        palindromes = filter (isIntPalindrome) listOfSums
            where
                listOfSums = map (multTuple) [ (x,y) | x<-[100..999], y<-[x..999] ]
                    where
                        multTuple t = (fst t) * (snd t)

main :: IO ()
main = do
    putStrLn (show problemFour)
    putStrLn (show (problemThree 600851475143))
    putStrLn (show (problemTwo 4000000))
    putStrLn (show (problemOne 999))